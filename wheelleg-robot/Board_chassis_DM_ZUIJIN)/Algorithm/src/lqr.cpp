/**
 *******************************************************************************
 * @file      : lqr.cpp
 * @brief     :
 * @history   :
 *  Version     Date            Author          Note
 *  V0.9.0      yyyy-mm-dd      <author>        1. <note>
 *******************************************************************************
 * @attention :
 *******************************************************************************
 *  Copyright (c) 2024 Reborn Team, USTB.
 *  All Rights Reserved.
 *******************************************************************************
 */
/* Includes ------------------------------------------------------------------*/
#include "lqr.h"
#include "string.h"
#include "stdint.h"
/* Private macro -------------------------------------------------------------*/
/* Private constants ---------------------------------------------------------*/
/* Private types -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/


//接触地面时的运动控制反馈增益矩阵
// Q_cost=diag([50 150 50 120 10 10 10 10 2000 50]);
//R_cost=diag([3 3 0.25 0.25]);
const float k[40][6] = {
   -1.4319  , -9.6092 ,   2.7227  , 10.5488  , -4.6798  ,  3.3093,

   -3.3625 , -19.3495 ,   6.3355 ,  21.2555  ,-10.6589  ,  6.6860,

   -2.6110 ,   3.9096 ,  -2.6260 ,  -4.0243  ,  2.7872 ,  -0.9663,

   -4.1183 ,   6.3514 ,  -4.2785 ,  -6.3484  ,  4.4531 ,  -1.5582,

   -2.9810 , -52.5566 ,  15.9778 ,  29.1651  ,-22.7603 ,  27.4315,

   -0.8013  , -4.3962 ,   0.9660  ,  1.4952  , -1.6210  ,  3.4117,

   -2.4603 ,  -0.2760 , -28.9337  ,  6.8547  , 15.4732 ,  12.9447,

   -0.1391  ,  0.8298 ,  -2.6878 ,  -0.9279  , -0.0809 ,   2.6963,

   22.3926 , -44.5759 , -22.0255 ,  29.3076  ,  4.6955 ,  30.9718,

    3.9760 ,  -6.5377 ,  -4.5129 ,   3.4981 ,   1.7399 ,   5.2871,

   -1.4319,    2.7227 ,  -9.6092 ,  -4.6798 ,  10.5488 ,   3.3093,

   -3.3625  ,  6.3355 , -19.3495 , -10.6589 ,  21.2555 ,   6.6860,

    2.6110 ,   2.6260,   -3.9096 ,  -2.7872,    4.0243 ,   0.9663,

    4.1183 ,   4.2785 ,  -6.3514 ,  -4.4531 ,   6.3484 ,   1.5582,

   -2.4603,  -28.9337 ,  -0.2760,   15.4732 ,   6.8547 ,  12.9447,

   -0.1391,   -2.6878,    0.8298 ,  -0.0809 ,  -0.9279 ,   2.6963,

   -2.9810 ,  15.9778,  -52.5566,  -22.7603 ,  29.1651 ,  27.4315,

   -0.8013 ,   0.9660,   -4.3962 ,  -1.6210 ,   1.4952 ,   3.4117,

   22.3926 , -22.0255,  -44.5759 ,   4.6955  , 29.3076 ,  30.9718,

    3.9760 ,  -4.5129,   -6.5377,    1.7399  ,  3.4981 ,   5.2871,

    8.0907 ,   6.9331,  -29.1523,  -27.8750,   26.1398  , 20.8510,

   17.8051,   11.0692,  -63.3726,  -54.0837 ,  56.3271 ,  46.6366,

   -3.8836,   -5.8612,   -2.5023 ,  10.3556 ,   3.4642 ,   0.1032,

   -6.1191 ,  -9.6478,   -3.9909  , 16.6731 ,   5.3536 ,  -0.5477,

   16.3923,   71.0672,  -50.8979 , -93.3418 ,  51.1850 ,  69.6769,

    5.5208,  -10.8464,    0.7547 ,  12.8066  , -1.9776 ,   7.3371,

   10.8503,  -23.4038,  -42.0049,    6.9530 ,  10.0455 , -35.2863,

    0.2294 ,  -3.6161,   -4.5995,    5.5431 ,   4.6883 , -10.2452,

   29.4424,  256.6904 , -60.9282, -286.9069  , 74.9311 , -49.3653,

    3.6496,   38.8511,   -5.6051  ,-40.3113 ,   7.4741  ,-11.1311,

    8.0907,  -29.1523,    6.9331 ,  26.1398 , -27.8750 ,  20.8510,

   17.8051 , -63.3726,   11.0692 ,  56.3271 , -54.0837 ,  46.6366,

    3.8836  ,  2.5023 ,   5.8612  , -3.4642 , -10.3556 ,  -0.1032,

    6.1191,    3.9909 ,   9.6478 ,  -5.3536  ,-16.6731 ,   0.5477,

   10.8503 , -42.0049,  -23.4038 ,  10.0455  ,  6.9530 , -35.2863,

    0.2294 ,  -4.5995,   -3.6161 ,   4.6883  ,  5.5431  ,-10.2452,

   16.3923 , -50.8979,   71.0672 ,  51.1850 , -93.3418  , 69.6769,

    5.5208  ,  0.7547,  -10.8464 ,  -1.9776 ,  12.8066  ,  7.3371,

   29.4424 , -60.9282,  256.6904 ,  74.9311 ,-286.9069  ,-49.3653,

    3.6496,   -5.6051,   38.8511,    7.4741 , -40.3113  ,-11.1311
};


//离地时的运动控制反馈增益矩阵，用于保持腿部姿态数值
//Q_cost=diag([10 10 10 10 150 100 150 100 2000 50]);
//R_cost=diag([3, 0.25]);
const float k_off[40][6] = {
 -0.4683  , -4.3124  ,  1.6471  ,  3.1747  , -1.4746   , 0.8757,

   -1.3863 ,  -9.4126 ,   4.7132  ,  8.2161  , -3.8934 ,   0.1613,

   -1.2215   , 1.8395 ,  -1.1948  , -0.9216  ,  1.1315 ,  -0.1305,

   -1.3289  ,  2.1545 ,  -1.5069 ,  -0.8610 ,   1.4820 ,  -0.3749,

   -3.1222 , -56.5928 ,  15.9600  , 26.7497  ,-20.8981 ,  26.1220,

   -1.1858 , -15.7062 ,   1.0733 ,  13.5281  , -1.8530  ,  2.5991,

   -1.4829 ,  -4.0802 , -26.4575 ,  12.4523  , 28.2111 ,  -4.0665,

   -0.0227 ,   0.8750  , -4.7243  , -1.7572 ,   2.7422  ,  3.6994,

   19.4097 , -13.6121  ,-18.0655 , -16.7486  ,  6.1810 ,  22.7554,

    3.5960 ,  -2.2566 ,  -3.8196  , -3.0515  ,  1.6575  ,  4.2944,

   -0.4683  ,  1.6471 ,  -4.3124 ,  -1.4746 ,   3.1747  ,  0.8757,

   -1.3863  ,  4.7132 ,  -9.4126  , -3.8934  ,  8.2161  ,  0.1613,

    1.2215  ,  1.1948 ,  -1.8395 ,  -1.1315  ,  0.9216  ,  0.1305,

    1.3289  ,  1.5069 ,  -2.1545 ,  -1.4820  ,  0.8610  ,  0.3749,

   -1.4829 , -26.4575 ,  -4.0802 ,  28.2111  , 12.4523 ,  -4.0665,

   -0.0227  , -4.7243 ,   0.8750 ,   2.7422  , -1.7572  ,  3.6994,

   -3.1222 ,  15.9600 , -56.5928  ,-20.8981  , 26.7497 ,  26.1220,

   -1.1858 ,   1.0733 , -15.7062,   -1.8530  , 13.5281  ,  2.5991,

   19.4097  ,-18.0655 , -13.6121 ,   6.1810  ,-16.7486  , 22.7554,

    3.5960 ,  -3.8196 ,  -2.2566 ,   1.6575  , -3.0515  ,  4.2944,

    2.4124  , 12.2228 , -11.0839 , -24.5382  ,  5.2423 ,  11.3900,

    6.9251  , 26.0921 , -31.1651 , -58.2841  , 16.0796   ,34.7073,

   -1.4409  , -3.6266  , -1.5715 ,   4.0108  ,  1.6841 ,  -2.4183,

   -1.5751  , -4.5864 ,  -1.2657  ,  4.6560  ,  0.8651 ,  -2.5951,

   22.3276  ,126.5666 , -52.9992 ,-184.4413  , 45.2199 ,  48.6978,

   13.9870  ,  9.7074 ,   1.4935 , -42.3597  , -4.1729 ,  10.0786,

    5.6137 ,  14.7834 , -29.3385 , -68.9050 , -31.1655 ,  24.0861,

    0.3613 ,  -2.7612,  -10.3333  ,  6.8368 ,   9.0997 , -11.3591,

   19.2212 , 188.1395 , -36.0367 ,-150.4202 ,  30.9075 , -36.4949,

    3.0833 ,  30.4077 ,  -4.4972 , -22.1763 ,   3.9257 ,  -8.1953,

    2.4124 , -11.0839 ,  12.2228 ,   5.2423 , -24.5382  , 11.3900,

    6.9251 , -31.1651 ,  26.0921  , 16.0796,  -58.2841  , 34.7073,

    1.4409  ,  1.5715 ,   3.6266 ,  -1.6841 ,  -4.0108  ,  2.4183,

    1.5751 ,   1.2657 ,   4.5864 ,  -0.8651 ,  -4.6560   , 2.5951,

    5.6137 , -29.3385 ,  14.7834 , -31.1655 , -68.9050 ,  24.0861,

    0.3613 , -10.3333 ,  -2.7612 ,   9.0997  ,  6.8368 , -11.3591,

   22.3276 , -52.9992,  126.5666 ,  45.2199 ,-184.4413  , 48.6978,

   13.9870 ,   1.4935 ,   9.7074 ,  -4.1729 , -42.3597  , 10.0786,

   19.2212  ,-36.0367 , 188.1395  , 30.9075 ,-150.4202 , -36.4949,

    3.0833 ,  -4.4972 ,  30.4077 ,   3.9257,  -22.1763 ,  -8.1953

};
/* External variables --------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

void Lqr::Calc() {
  float lsql = leg_len_l_ * leg_len_l_;
	float lsqr = leg_len_r_ * leg_len_r_;
	float lsqlr=leg_len_l_ * leg_len_r_;
  for (uint8_t i = 0; i < 4; ++i)
		{
		
    uint8_t j = i * 10;
    T_K_[i][0] =
        (k[j + 0][0] + k[j + 0][1] * leg_len_l_ + k[j + 0][2]* leg_len_r_+k[j + 0][3]* lsql+k[j + 0][4]* lsqr+k[j + 0][5]* lsqlr) * (target_dist_- dist_);
    T_K_[i][1] =
        (k[j + 1][0] + k[j + 1][1] * leg_len_l_ + k[j + 1][2]* leg_len_r_+k[j + 1][3]* lsql+k[j + 1][4]* lsqr+k[j + 1][5]* lsqlr) * (target_speed_ -speed_);
    T_K_[i][2] =
        (k[j + 2][0] + k[j + 2][1] * leg_len_l_ + k[j + 2][2]* leg_len_r_+k[j + 2][3]* lsql+k[j + 2][4]* lsqr+k[j + 2][5]* lsqlr) *(target_rotation_- rotation_);
    T_K_[i][3] = 
				(k[j + 3][0] + k[j + 0][1] * leg_len_l_ + k[j + 3][2]* leg_len_r_+k[j + 3][3]* lsql+k[j + 3][4]* lsqr+k[j + 3][5]* lsqlr) *(target_w_rotation_ -w_rotation_);
    T_K_[i][4] =
        (k[j + 4][0] + k[j + 0][1] * leg_len_l_ + k[j + 4][2]* leg_len_r_+k[j + 4][3]* lsql+k[j + 4][4]* lsqr+k[j + 4][5]* lsqlr) *- theta_l_;
    T_K_[i][5] =
        (k[j + 5][0] + k[j + 0][1] * leg_len_l_ + k[j + 5][2]* leg_len_r_+k[j + 5][3]* lsql+k[j + 5][4]* lsqr+k[j + 5][5]* lsqlr) * -w_theta_l_;
		T_K_[i][6] =
        (k[j + 6][0] + k[j + 0][1] * leg_len_l_ + k[j + 6][2]* leg_len_r_+k[j + 6][3]* lsql+k[j + 6][4]* lsqr+k[j + 6][5]* lsqlr) *- theta_r_;
    T_K_[i][7] =
        (k[j + 7][0] + k[j + 0][1] * leg_len_l_ + k[j + 7][2]* leg_len_r_+k[j + 7][3]* lsql+k[j + 7][4]* lsqr+k[j + 7][5]* lsqlr) * -w_theta_r_;
		T_K_[i][8] =
        (k[j + 8][0] + k[j + 0][1] * leg_len_l_ + k[j + 8][2]* leg_len_r_+k[j + 8][3]* lsql+k[j + 8][4]* lsqr+k[j + 8][5]* lsqlr) *- body_;
    T_K_[i][9] =
        (k[j + 9][0] + k[j + 0][1] * leg_len_l_ + k[j + 9][2]* leg_len_r_+k[j + 9][3]* lsql+k[j + 9][4]* lsqr+k[j + 9][5]* lsqlr) * -w_body_;
		}
if(F_N_L_<15.0f)
{
	for(int k=0;k<=3;k++)
	{
		T_K_[0][k]=0;
	}
		for(int k=8;k<=9;k++)
	{
		T_K_[0][k]=0;
	}
	for(int k=0;k<=3;k++)
	{
		T_K_[2][k]=0;
	}
		for(int k=8;k<=9;k++)
	{
		T_K_[2][k]=0;
	}
	 T_K_[0][4] =
        (k_off[4][0] + k_off[4][1] * leg_len_l_ + k_off[4][2]* leg_len_r_+k_off[4][3]* lsql+k_off[4][4]* lsqr+k_off[4][5]* lsqlr) *- theta_l_;
   T_K_[0][5] =
        (k_off[5][0] + k_off[5][1] * leg_len_l_ + k_off[5][2]* leg_len_r_+k_off[5][3]* lsql+k_off[5][4]* lsqr+k_off[5][5]* lsqlr) * -w_theta_l_;
	 T_K_[0][6] =
        (k_off[6][0] + k_off[6][1] * leg_len_l_ + k_off[6][2]* leg_len_r_+k_off[6][3]* lsql+k_off[6][4]* lsqr+k_off[6][5]* lsqlr) *- theta_r_;
   T_K_[0][7] =
        (k_off[7][0] + k_off[7][1] * leg_len_l_ + k_off[7][2]* leg_len_r_+k_off[7][3]* lsql+k_off[7][4]* lsqr+k_off[7][5]* lsqlr) * -w_theta_r_;
		T_K_[2][4] =
        (k_off[24][0] + k_off[24][1] * leg_len_l_ + k_off[24][2]* leg_len_r_+k_off[24][3]* lsql+k_off[24][4]* lsqr+k_off[24][5]* lsqlr) *- theta_l_;
   T_K_[2][5] =
        (k_off[25][0] + k_off[25][1] * leg_len_l_ + k_off[25][2]* leg_len_r_+k_off[25][3]* lsql+k_off[25][4]* lsqr+k_off[25][5]* lsqlr) * -w_theta_l_;
	 T_K_[2][6] =
        (k_off[26][0] + k_off[26][1] * leg_len_l_ + k_off[26][2]* leg_len_r_+k_off[26][3]* lsql+k_off[26][4]* lsqr+k_off[26][5]* lsqlr) *- theta_r_;
   T_K_[2][7] =
        (k_off[27][0] + k_off[27][1] * leg_len_l_ + k_off[27][2]* leg_len_r_+k_off[27][3]* lsql+k_off[27][4]* lsqr+k_off[27][5]* lsqlr) * -w_theta_r_;
}	

if(F_N_R_<15.0f)
{
	for(int k=0;k<=3;k++)
	{
		T_K_[1][k]=0;
	}
		for(int k=8;k<=9;k++)
	{
		T_K_[1][k]=0;
	}
	for(int k=0;k<=3;k++)
	{
		T_K_[3][k]=0;
	}
		for(int k=8;k<=9;k++)
	{
		T_K_[3][k]=0;
	}
 T_K_[1][4] =
        (k_off[14][0] + k_off[14][1] * leg_len_l_ + k_off[14][2]* leg_len_r_+k_off[14][3]* lsql+k_off[14][4]* lsqr+k_off[14][5]* lsqlr) *- theta_l_;
   T_K_[1][5] =
        (k_off[15][0] + k_off[15][1] * leg_len_l_ + k_off[15][2]* leg_len_r_+k_off[15][3]* lsql+k_off[15][4]* lsqr+k_off[15][5]* lsqlr) * -w_theta_l_;
	 T_K_[1][6] =
        (k_off[16][0] + k_off[16][1] * leg_len_l_ + k_off[16][2]* leg_len_r_+k_off[16][3]* lsql+k_off[16][4]* lsqr+k_off[16][5]* lsqlr) *- theta_r_;
   T_K_[1][7] =
        (k_off[17][0] + k_off[17][1] * leg_len_l_ + k_off[17][2]* leg_len_r_+k_off[17][3]* lsql+k_off[17][4]* lsqr+k_off[17][5]* lsqlr) * -w_theta_r_;
		T_K_[3][4] =
        (k_off[34][0] + k_off[34][1] * leg_len_l_ + k_off[34][2]* leg_len_r_+k_off[34][3]* lsql+k_off[34][4]* lsqr+k_off[34][5]* lsqlr) *- theta_l_;
   T_K_[3][5] =
        (k_off[35][0] + k_off[35][1] * leg_len_l_ + k_off[35][2]* leg_len_r_+k_off[35][3]* lsql+k_off[35][4]* lsqr+k_off[35][5]* lsqlr) * -w_theta_l_;
	 T_K_[3][6] =
        (k_off[36][0] + k_off[36][1] * leg_len_l_ + k_off[36][2]* leg_len_r_+k_off[36][3]* lsql+k_off[36][4]* lsqr+k_off[36][5]* lsqlr) *- theta_r_;
   T_K_[3][7] =
        (k_off[37][0] + k_off[37][1] * leg_len_l_ + k_off[37][2]* leg_len_r_+k_off[37][3]* lsql+k_off[37][4]* lsqr+k_off[37][5]* lsqlr) * -w_theta_r_;
}
 for (uint8_t i = 0; i < 4; ++i) 
	{
    T_[i] = T_K_[i][0] + T_K_[i][1] + T_K_[i][2] + T_K_[i][3] + T_K_[i][4] +T_K_[i][5]+T_K_[i][6]+T_K_[i][7]+T_K_[i][8]+T_K_[i][9];
  }
 
}